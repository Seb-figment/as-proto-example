// Code generated by protoc-gen-as. DO NOT EDIT.
// versions:
// 	 protoc-gen-as v0.3.0-alpha.2
// 	 protoc        v3.20.1
// source: bar/qux.ts

import { Writer, Reader, Protobuf } from "as-proto";
import { foo } from "../foo";

export class Qux {
  static encode(message: Qux, writer: Writer): void {
    writer.uint32(8);
    writer.uint32(message.a);

    writer.uint32(18);
    writer.string(message.b);

    const c_ = message.c;
    if (c_ !== null) {
      writer.uint32(26);
      writer.fork();
      Qux.QuxStuff.encode(c_, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Qux {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Qux();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.a = reader.uint32();
          break;

        case 2:
          message.b = reader.string();
          break;

        case 3:
          message.c = Qux.QuxStuff.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  a: u32;
  b: string;
  c: Qux.QuxStuff | null;

  constructor(a: u32 = 0, b: string = "", c: Qux.QuxStuff | null = null) {
    this.a = a;
    this.b = b;
    this.c = c;
  }
}

export function decodeQux(a: Uint8Array): Qux {
  return Protobuf.decode<Qux>(a, Qux.decode);
}

export namespace Qux {
  export class QuxStuff {
    static encode(message: QuxStuff, writer: Writer): void {
      const a_ = message.a;
      for (let i = 0; i < a_.length; ++i) {
        writer.uint32(10);
        writer.fork();
        foo.baz.Foo.encode(a_[i], writer);
        writer.ldelim();
      }

      writer.uint32(16);
      writer.uint64(message.b);
    }

    static decode(reader: Reader, length: i32): QuxStuff {
      const end: usize = length < 0 ? reader.end : reader.ptr + length;
      const message = new QuxStuff();

      while (reader.ptr < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            message.a.push(foo.baz.Foo.decode(reader, reader.uint32()));
            break;

          case 2:
            message.b = reader.uint64();
            break;

          default:
            reader.skipType(tag & 7);
            break;
        }
      }

      return message;
    }

    a: Array<foo.baz.Foo>;
    b: u64;

    constructor(a: Array<foo.baz.Foo> = [], b: u64 = 0) {
      this.a = a;
      this.b = b;
    }
  }

  export function decodeQuxStuff(a: Uint8Array): QuxStuff {
    return Protobuf.decode<QuxStuff>(a, QuxStuff.decode);
  }
}
