// Code generated by protoc-gen-as. DO NOT EDIT.
// versions:
// 	 protoc-gen-as v0.3.0-alpha.2
// 	 protoc        v3.20.1
// source: bar/bar.ts

import { Writer, Reader, Protobuf } from "as-proto";
import { Qux } from "./qux";
import { foo } from "../foo";

export class Bar {
  static encode(message: Bar, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.a);

    const b_ = message.b;
    for (let i = 0; i < b_.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Qux.encode(b_[i], writer);
      writer.ldelim();
    }

    const c_ = message.c;
    for (let i = 0; i < c_.length; ++i) {
      writer.uint32(26);
      writer.fork();
      foo.baz.Qux.encode(c_[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Bar {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Bar();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.a = reader.bytes();
          break;

        case 2:
          message.b.push(Qux.decode(reader, reader.uint32()));
          break;

        case 3:
          message.c.push(foo.baz.Qux.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  a: Uint8Array;
  b: Array<Qux>;
  c: Array<foo.baz.Qux>;

  constructor(a: Uint8Array = new Uint8Array(0), b: Array<Qux> = [], c: Array<foo.baz.Qux> = []) {
    this.a = a;
    this.b = b;
    this.c = c;
  }
}

export function decodeBar(a: Uint8Array): Bar {
  return Protobuf.decode<Bar>(a, Bar.decode);
}
