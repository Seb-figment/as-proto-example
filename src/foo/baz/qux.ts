// Code generated by protoc-gen-as. DO NOT EDIT.
// versions:
// 	 protoc-gen-as v0.3.0-alpha.2
// 	 protoc        v3.20.1
// source: foo/baz/qux.ts

import { Writer, Reader, Protobuf } from "as-proto";
import { Foo } from "./foo";

export class Qux {
  static encode(message: Qux, writer: Writer): void {
    const a_ = message.a;
    if (a_ !== null) {
      writer.uint32(10);
      writer.fork();
      Foo.encode(a_, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.b);
  }

  static decode(reader: Reader, length: i32): Qux {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Qux();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.a = Foo.decode(reader, reader.uint32());
          break;

        case 2:
          message.b = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  a: Foo | null;
  b: string;

  constructor(a: Foo | null = null, b: string = "") {
    this.a = a;
    this.b = b;
  }
}

export function decodeQux(a: Uint8Array): Qux {
  return Protobuf.decode<Qux>(a, Qux.decode);
}
